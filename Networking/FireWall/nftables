# devops_learning_nftables.nft
# File cấu hình nftables hoàn chỉnh cho mục đích học tập và thực hành.
# Tường lửa trạng thái cơ bản, ví dụ về lọc gói, chống tấn công, NAT, v.v.
# Được tổng hợp dựa trên ArchWiki (nftables - ArchWiki) và các kiến thức DevOps.

# -----------------------------------------------------------------------------
# PHẦN 1: KHỞI TẠO VÀ XÓA CÁC QUY TẮC HIỆN CÓ (CỰC KỲ QUAN TRỌNG VÀ CẨN TRỌNG)
# -----------------------------------------------------------------------------
# LỆNH NÀY SẼ XÓA TẤT CẢ CÁC BẢNG (TABLES), CHUỖI (CHAINS) VÀ QUY TẮC (RULES)
# HIỆN CÓ TRONG NFTABLES. HỆ THỐNG CỦA BẠN SẼ KHÔNG ĐƯỢC BẢO VỆ CHO ĐẾN KHI
# CÁC QUY TẮC MỚI ĐƯỢC TẢI THÀNH CÔNG.
# HÃY LUÔN THỰC HIỆN TRONG MÔI TRƯỜNG ẢO HÓA HOẶC MÁY THỬ NGHIỆM ĐỂ TRÁNH MẤT
# KẾT NỐI HOẶC RỦI RO BẢO MẬT TRÊN HỆ THỐNG PRODUCTION.
flush ruleset

# -----------------------------------------------------------------------------
# PHẦN 2: ĐỊNH NGHĨA CÁC BẢNG (TABLES)
# -----------------------------------------------------------------------------
# Trong nftables, các bảng không được tích hợp sẵn như iptables; bạn phải tự
# định nghĩa chúng [1]. Mỗi bảng chỉ có một họ địa chỉ (address family) [1].
# - 'inet': Áp dụng cho cả IPv4 và IPv6, giúp đơn giản hóa việc định nghĩa quy
#           tắc cho cả hai giao thức [2]. Đây là lựa chọn phổ biến cho một
#           tường lửa chung.
# - 'ip': Chỉ áp dụng cho IPv4 [2].
# - 'ip6': Chỉ áp dụng cho IPv6 [2].
# - 'arp', 'bridge': Các họ địa chỉ khác ít phổ biến hơn cho tường lửa chung [2].
# Cú pháp: add table <family_type> <table_name> [3]

add table inet my_filter_table # Bảng chính để lọc gói tin.
add table inet my_nat_table     # Bảng cho các quy tắc NAT (Network Address Translation).
add table inet my_dev_table     # Bảng cho các quy tắc phát triển/thử nghiệm, ví dụ: blackhole động.

# -----------------------------------------------------------------------------
# PHẦN 3: ĐỊNH NGHĨA CÁC CHUỖI CƠ SỞ (BASE CHAINS)
# -----------------------------------------------------------------------------
# Chuỗi cơ sở là điểm vào cho các gói tin từ ngăn xếp mạng [4].
# Chúng yêu cầu chỉ định 'type', 'hook' và 'priority' [5].
# - 'type filter': Loại chuỗi dùng để lọc gói tin [5].
# - 'policy drop': Chính sách mặc định là chặn tất cả các gói tin không được
#                  chấp nhận rõ ràng. Đây là chính sách an toàn cho tường lửa [6].
# - 'policy accept': Chính sách mặc định là cho phép tất cả các gói tin. Thường
#                    dùng cho chuỗi 'output' để cho phép mọi lưu lượng đi ra [6].
# Cú pháp: add chain <family_type> <table_name> <chain_name> '{ type <chain_type> hook <hook_type> priority <priority_value> ; policy <policy> ; }' [5]

# Chuỗi 'input': Xử lý các gói tin ĐẾN máy chủ này.
add chain inet my_filter_table my_input '{ type filter hook input priority 0 ; policy drop ; }'

# Chuỗi 'forward': Xử lý các gói tin ĐI QUA máy chủ này (khi máy đóng vai trò router).
# Với máy trạm/server thông thường không chuyển tiếp gói tin, chính sách 'drop' là an toàn.
add chain inet my_filter_table my_forward '{ type filter hook forward priority 0 ; policy drop ; }'

# Chuỗi 'output': Xử lý các gói tin ĐI RA TỪ máy chủ này.
# Chính sách 'accept' thường an toàn vì bạn đã kiểm soát lưu lượng đi vào.
add chain inet my_filter_table my_output '{ type filter hook output priority 0 ; policy accept ; }'

# Chuỗi NAT: (Chỉ dùng khi máy đóng vai trò Router hoặc cần Port Forwarding)
# hook prerouting: Để DNAT (Destination NAT) - thay đổi IP đích trước khi gói tin đến đích [6, 7].
add chain nat my_nat_table my_prerouting '{ type nat hook prerouting priority -100 ; }' # Priority: dstnat

# hook postrouting: Để SNAT (Source NAT) / Masquerading - thay đổi IP nguồn khi gói tin đi ra [6-8].
add chain nat my_nat_table my_postrouting '{ type nat hook postrouting priority 100 ; }' # Priority: srcnat

# -----------------------------------------------------------------------------
# PHẦN 4: ĐỊNH NGHĨA CÁC CHUỖI THÔNG THƯỜNG (REGULAR CHAINS)
# -----------------------------------------------------------------------------
# Các chuỗi này không phải là điểm vào trực tiếp mà dùng để tổ chức quy tắc
# bằng cách "jump" (nhảy) đến từ các chuỗi cơ sở [4].
# Cú pháp: add chain <family_type> <table_name> <chain_name> [9]

add chain inet my_filter_table my_tcp_chain # Chứa các quy tắc cho lưu lượng TCP đến.
add chain inet my_filter_table my_udp_chain # Chứa các quy tắc cho lưu lượng UDP đến.
add chain inet my_filter_table my_icmp_chain # Chứa các quy tắc cho lưu lượng ICMP đến.

# Chuỗi để chứa các quy tắc lọc gói tin từ mạng nội bộ (LAN).
# Ví dụ này được lấy từ mẫu 'Workstation' và 'Server' trong ArchWiki [10, 11].
add chain inet my_filter_table my_input_lan

# -----------------------------------------------------------------------------
# PHẦN 5: ĐỊNH NGHĨA CÁC TẬP HỢP (SETS)
# -----------------------------------------------------------------------------
# Sets là các nhóm các phần tử (ví dụ: địa chỉ IP, cổng) có thể được sử dụng
# trong các quy tắc để tăng hiệu quả và dễ quản lý [12].
# Có thể là 'named' (có thể cập nhật động) hoặc 'anonymous' (nhúng trong quy tắc) [12].

# Tập hợp các địa chỉ IP private cho IPv4 và IPv6 (dùng cho quy tắc LAN) [10, 11].
add set inet my_filter_table LANv4 '{ type ipv4_addr; flags interval; elements = { 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16, 169.254.0.0/16 }; }'
add set inet my_filter_table LANv6 '{ type ipv6_addr; flags interval; elements = { fd00::/8, fe80::/10 }; }'

# Tập hợp để theo dõi các kết nối HTTPS mới (để đếm hoặc giới hạn rate) [7].
add set inet my_filter_table https_connections '{ type ipv4_addr; flags dynamic; size 65536; timeout 60m; }'

# Tập hợp cho Dynamic Blackhole (chặn động các IP tấn công) [13].
add set inet my_dev_table blackhole_ipv4 '{ type ipv4_addr; flags dynamic, timeout; size 65536; }'
add set inet my_dev_table blackhole_ipv6 '{ type ipv6_addr; flags dynamic, timeout; size 65536; }'

# -----------------------------------------------------------------------------
# PHẦN 6: ĐỊNH NGHĨA CÁC QUY TẮC (RULES)
# -----------------------------------------------------------------------------
# Quy tắc được xây dựng từ các biểu thức và câu lệnh, được chứa trong các chuỗi [14].
# Các 'statement' bao gồm 'accept', 'drop', 'queue', 'continue', 'return', 'jump', 'goto' [15].

# Quy tắc 6.1: Các quy tắc chung trong chuỗi 'my_input' (filter input)
# Mặc định, chuỗi 'my_input' có chính sách 'drop'. Do đó, mọi thứ phải được chấp nhận rõ ràng.

# Chấp nhận các kết nối đã được thiết lập (established) hoặc liên quan (related).
# Điều này cho phép lưu lượng phản hồi từ các kết nối đã được khởi tạo từ máy của bạn [16].
add rule inet my_filter_table my_input ct state '{ related, established }' accept comment "Allow established and related connections"

# Chấp nhận tất cả lưu lượng trên giao diện loopback (iif lo) [16].
# Giao diện loopback là nơi các ứng dụng trên cùng một máy giao tiếp với nhau.
add rule inet my_filter_table my_input iif lo accept comment "Allow localhost traffic"

# Thả bỏ (drop) bất kỳ gói tin nào có trạng thái kết nối không hợp lệ (invalid) [16].
add rule inet my_filter_table my_input ct state invalid drop comment "Drop invalid connections"

# Thả bỏ các gói tin nếu địa chỉ IP đích không được cấu hình trên giao diện đến (strong host model) [10, 11].
add rule inet my_filter_table my_input fib daddr . iif type != '{ local, broadcast, multicast }' drop comment "Drop packets with unconfigured destination IP on incoming interface"

# Chấp nhận các gói tin ICMP (ví dụ: lệnh ping) và chuyển đến chuỗi riêng [16].
# 'meta l4proto' để kiểm tra giao thức lớp 4 [17].
add rule inet my_filter_table my_input meta l4proto '{ icmp, ipv6-icmp }' jump my_icmp_chain comment "Jump to ICMP chain"

# Chấp nhận các gói tin IGMP (Internet Group Management Protocol) cho IPv4 [16].
add rule inet my_filter_table my_input ip protocol igmp accept comment "Accept IGMP"

# Chuyển các gói tin UDP mới đến chuỗi 'my_udp_chain' để xử lý tiếp [18].
add rule inet my_filter_table my_input meta l4proto udp ct state new jump my_udp_chain comment "Jump new UDP connections to UDP chain"

# Chuyển các gói tin TCP SYN mới (bắt đầu kết nối) đến chuỗi 'my_tcp_chain' để xử lý tiếp [18].
add rule inet my_filter_table my_input 'meta l4proto tcp tcp flags & (fin|syn|rst|ack) == syn ct state new jump my_tcp_chain' comment "Jump new TCP connections to TCP chain"

# Chuyển các kết nối đến từ các dải IP LAN private đến chuỗi my_input_lan [10, 11].
add rule inet my_filter_table my_input ip saddr @LANv4 jump my_input_lan comment "Connections from private IPv4 LAN"
add rule inet my_filter_table my_input ip6 saddr @LANv6 jump my_input_lan comment "Connections from private IPv6 LAN"

# Đếm bất kỳ lưu lượng nào khác không khớp với các quy tắc trên (để gỡ lỗi/kiểm tra) [10].
add rule inet my_filter_table my_input counter comment "Count any other traffic hitting input chain"

# Quy tắc 6.2: Các quy tắc trong chuỗi 'my_tcp_chain' (filter input)
# Tại đây bạn sẽ định nghĩa các cổng TCP muốn mở cho phép kết nối đến.

add rule inet my_filter_table my_tcp_chain tcp dport 80 accept comment "Allow HTTP (port 80)"
add rule inet my_filter_table my_tcp_chain tcp dport 443 accept comment "Allow HTTPS (port 443)"
add rule inet my_filter_table my_tcp_chain tcp dport 22 accept comment "Allow SSH (port 22) - CAUTION: Limit access or use SSH keys"
add rule inet my_filter_table my_tcp_chain tcp dport 53 accept comment "Allow TCP DNS (port 53)"
add rule inet my_filter_table my_tcp_chain tcp dport 8080 accept comment "Allow HTTP on 8080 (for dev/test apps)"
add rule inet my_filter_table my_tcp_chain tcp dport 8008 accept comment "Allow HTTP on 8008 (for dev/test apps)"

# Quy tắc 6.3: Các quy tắc trong chuỗi 'my_udp_chain' (filter input)
# Tại đây bạn sẽ định nghĩa các cổng UDP muốn mở cho phép kết nối đến.

add rule inet my_filter_table my_udp_chain udp dport 443 accept comment "Allow UDP/QUIC (port 443)"
add rule inet my_filter_table my_udp_chain udp dport 53 accept comment "Allow UDP DNS (port 53)"
add rule inet my_filter_table my_udp_chain udp dport 67 udp sport 68 ip saddr 0.0.0.0 ip daddr 255.255.255.255 accept comment "Accept DHCPDISCOVER (for DHCP-Proxy)"
add rule inet my_filter_table my_udp_chain udp dport 5353 ip6 daddr ff02::fb accept comment "Accept mDNS for IPv6"
add rule inet my_filter_table my_udp_chain udp dport 5353 ip daddr 224.0.0.251 accept comment "Accept mDNS for IPv4"

# Quy tắc 6.4: Các quy tắc trong chuỗi 'my_icmp_chain' (filter input)
# Kiểm soát lưu lượng ICMP để tránh các cuộc tấn công DDoS hoặc dò quét mạng.

# Giới hạn tốc độ ping (echo-request) để chống ping floods [19].
add rule inet my_filter_table my_icmp_chain icmp type echo-request limit rate over 10/second burst 4 packets drop comment "No ping floods (IPv4)"
add rule inet my_filter_table my_icmp_chain icmpv6 type echo-request limit rate over 10/second burst 4 packets drop comment "No ping floods (IPv6)"

# Chấp nhận tất cả các loại ICMP khác sau khi giới hạn ping.
add rule inet my_filter_table my_icmp_chain accept comment "Accept other ICMP types"


# Quy tắc 6.5: Các quy tắc trong chuỗi 'my_input_lan' (filter input, từ LAN)
# Các quy tắc dành riêng cho lưu lượng từ mạng nội bộ, có thể nới lỏng hơn.

add rule inet my_filter_table my_input_lan ct state '{ related, established }' accept comment "LAN: Allow established/related"
add rule inet my_filter_table my_input_lan ct state invalid drop comment "LAN: Drop invalid"

# Chấp nhận lưu lượng UPnP IGD cho port mapping [10].
add rule inet my_filter_table my_input_lan udp sport 1900 udp dport >= 1024 meta pkttype unicast limit rate 4/second burst 20 packets accept comment "LAN: Accept UPnP IGD reply"

# Chấp nhận các dịch vụ Samba/NetBIOS trong LAN [11].
add rule inet my_filter_table my_input_lan udp sport netbios-ns udp dport >= 1024 meta pkttype unicast accept comment "LAN: Accept Samba Workgroup browsing replies"
add rule inet my_filter_table my_input_lan meta l4proto '{ tcp, udp }' th dport 2049 accept comment "LAN: Accept NFS"
add rule inet my_filter_table my_input_lan udp dport netbios-ns accept comment "LAN: Accept NetBIOS Name Service (nmbd)"
add rule inet my_filter_table my_input_lan udp dport netbios-dgm accept comment "LAN: Accept NetBIOS Datagram Service (nmbd)"
add rule inet my_filter_table my_input_lan tcp dport netbios-ssn accept comment "LAN: Accept NetBIOS Session Service (smbd)"
add rule inet my_filter_table my_input_lan tcp dport microsoft-ds accept comment "LAN: Accept Microsoft Directory Service (smbd)"

# Chấp nhận các dịch vụ PXE/TFTP trong LAN [11].
add rule inet my_filter_table my_input_lan udp sport '{ bootpc, 4011 }' udp dport '{ bootps, 4011 }' accept comment "LAN: Accept PXE"
add rule inet my_filter_table my_input_lan udp dport tftp accept comment "LAN: Accept TFTP"

# Quy tắc 6.6: Các quy tắc nâng cao (chống tấn công, NAT, v.v.)

# Ngăn chặn tấn công brute-force SSH bằng cách giới hạn số kết nối mới [19].
# Quy tắc này có thể đặt trong 'my_tcp_chain' hoặc 'my_input' tùy cấu trúc.
# Ví dụ này đặt trong input để dễ quản lý.
add rule inet my_filter_table my_input tcp dport 22 ct state new limit rate 15/minute accept comment "Avoid brute force on SSH"

# Masquerading (NAT nguồn - SNAT) [8, 20].
# Chuyển đổi địa chỉ IP nguồn của các gói tin đi ra từ giao diện 'enp2s0'
# (ví dụ: giao diện WAN) để chúng có IP của giao diện đó.
# Điều này hữu ích khi IP của giao diện là động.
# LƯU Ý: Thay 'enp2s0' bằng tên giao diện WAN thực của bạn.
# LƯU Ý: Cần bật IP forwarding trong kernel (sysctl -w net.ipv4.ip_forward=1)
#       và nếu là IPv6 thì sysctl -w net.ipv6.conf.all.forwarding=1.
add rule inet my_nat_table my_postrouting oifname "enp2s0" masquerade comment "Masquerade outbound traffic on WAN interface"

# Port Forwarding (NAT đích - DNAT) [7, 21].
# Chuyển hướng lưu lượng đến cổng 22 và 80 trên giao diện 'eth0' (ví dụ: WAN)
# tới máy chủ nội bộ có địa chỉ IP '10.0.0.2'.
# LƯU Ý: Thay 'eth0' bằng tên giao diện WAN thực của bạn.
# LƯU Ý: Thay '10.0.0.2' bằng địa chỉ IP của máy chủ nội bộ.
add rule inet my_nat_table my_prerouting iif "eth0" tcp dport '{22, 80}' dnat to 10.0.0.2 comment "Forward ports 22, 80 to internal server 10.0.0.2"

# Dynamic Blackhole: Thả bỏ các kết nối HTTPS từ IP nguồn vượt quá giới hạn [13].
# Khi một IP nào đó tấn công cổng 443 quá nhanh, nó sẽ bị thêm vào set blackhole
# và bị chặn trong 1 phút.
add rule inet my_dev_table input ct state new meta l4proto '{ tcp, udp }' th dport 443 \
  meter flood_ipv4 size 128000 '{ ip saddr timeout 10s limit rate over 10/second }' \
  add @blackhole_ipv4 '{ ip saddr timeout 1m }' \
  comment "Blackhole IPv4 for 1min if HTTPS flood detected"

add rule inet my_dev_table input ct state new meta l4proto '{ tcp, udp }' th dport 443 \
  meter flood_ipv6 size 128000 '{ ip6 saddr and ffff:ffff:ffff:ffff:: timeout 10s limit rate over 10/second }' \
  add @blackhole_ipv6 '{ ip6 saddr and ffff:ffff:ffff:ffff:: timeout 1m }' \
  comment "Blackhole IPv6 for 1min if HTTPS flood detected"

add rule inet my_dev_table input ip saddr @blackhole_ipv4 counter drop comment "Drop blackholed IPv4"
add rule inet my_dev_table input ip6 saddr and ffff:ffff:ffff:ffff:: @blackhole_ipv6 counter drop comment "Drop blackholed IPv6"

# Ghi lại (log) các gói tin đến không được chấp nhận (ví dụ để gỡ lỗi/kiểm tra).
# Đặt quy tắc này ở cuối chuỗi 'my_input' (trước chính sách 'drop' nếu có).
# HOẶC có thể thêm vào một chuỗi riêng để log các loại lưu lượng cụ thể.
# add rule inet my_filter_table my_input log prefix "NFT_DROP: " comment "Log dropped packets"

# -----------------------------------------------------------------------------
# PHẦN 7: LƯU TRỮ VÀ KÍCH HOẠT (QUAN TRỌNG ĐỂ CẤU HÌNH BỀN VỮNG)
# -----------------------------------------------------------------------------
# Sau khi thử nghiệm thành công, bạn có thể lưu các quy tắc này để chúng
# được tải lại sau khi khởi động lại hệ thống.
# 1. Lưu file này vào /etc/nftables.conf
#    (LƯU Ý: File này có thể đã tồn tại, hãy sao lưu trước hoặc chỉnh sửa cẩn thận)
# 2. Bật dịch vụ nftables:
#    sudo systemctl enable nftables.service
# 3. Khởi động dịch vụ nftables (để tải quy tắc):
#    sudo systemctl start nftables.service
# Hoặc để lưu bộ quy tắc hiện tại đang chạy vào file mặc định:
#    sudo nft -s list ruleset > /etc/nftables.conf
#    LƯU Ý: Lệnh này sẽ xuất ra các quy tắc đang chạy. Nếu bạn có các biến
#    định nghĩa trong file gốc, chúng sẽ bị thay thế bằng giá trị của chúng
#    trong file xuất ra [22].

# -----------------------------------------------------------------------------
# PHẦN 8: GHI CHÚ BỔ SUNG VỀ CÁC ĐIỀU KIỆN
# -----------------------------------------------------------------------------
# - 'iif <interface_name>': Giao diện đầu vào (e.g., iif eth0) [17].
# - 'oif <interface_name>': Giao diện đầu ra (e.g., oif eth0) [17].
# - 'meta l4proto <protocol>': Giao thức lớp 4 (tcp, udp, icmp, ipv6-icmp, v.v.) [17].
# - 'ip protocol <protocol>': Giao thức IP (ví dụ: igmp) [17].
# - 'tcp dport <port>': Cổng đích TCP [17].
# - 'udp dport <port>': Cổng đích UDP [17].
# - 'saddr <ip_address>': Địa chỉ IP nguồn [17].
# - 'daddr <ip_address>': Địa chỉ IP đích [17].
# - 'ct state { new, established, related, invalid }': Trạng thái kết nối [17].
# - 'jump <chain_name>': Chuyển điều khiển đến một chuỗi khác. Sau khi chuỗi đó kết thúc,
#                          quy tắc tiếp theo trong chuỗi hiện tại sẽ được xử lý [15].
# - 'goto <chain_name>': Chuyển điều khiển đến một chuỗi khác. Sau khi chuỗi đó kết thúc,
#                          quy trình xử lý gói tin sẽ kết thúc [15].
# - 'comment "..."': Thêm ghi chú cho quy tắc, rất hữu ích cho việc quản lý [10].


--------------------------------------------------------------------------------

